<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd">


	<aop:aspectj-autoproxy proxy-target-class="true" />
	
	<context:component-scan base-package="lxy.demo.*"></context:component-scan>

	<context:property-placeholder location="classpath:properties/jdbc.properties" />

	<!-- 引入jdbc配置文件 -->
	<!-- classpath就是代表 /输出文件夹 /classes/ 这个路径 -->
	<!-- classpath 和 classpath* 区别 -->
	<!-- classpath：只会到你的class路径中查找找文件; -->
	<!-- classpath*：不仅包含class路径，还包括jar文件中(class路径)进行查找 深入查找 -->
	<!-- 1、配置数据源 DriverManagerDataSource -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverName}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.jusername}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="initialSize" value="5" />
		<property name="minIdle" value="3" />
		<property name="maxIdle" value="5" />
	</bean>
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:mybatis.xml"></property>
		<!--<property name="mapperLocations" value="classpath:/mapper/*.xml"></property> -->
		<property name="mapperLocations" value="classpath*:/mapper/*.xml"></property>
		<property name="typeAliasesPackage" value="lxy.demo.transaction.bean"></property>
	</bean>
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	<!-- 3、spring与mybatis整合配置 扫描素有的dao接口与mapper文件匹配 MapperScannerConfigurer -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="lxy.demo.transaction.dao"></property>
	</bean>
	<!-- 4、事务管理 DataSourceTransactionManager -->

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>


	<!-- 5、使用spring的声明式事务，后续调整为 拦截式事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
</beans>
